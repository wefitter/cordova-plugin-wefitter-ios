// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WeFitterLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import HealthKit
import Swift
@_exported import WeFitterLib
import _Concurrency
import _StringProcessing
import os.log
import os
public enum WeFitterHealthKitError : Swift.Error {
  case authorizationNotGranted(description: Swift.String)
  case apiURLNotValid
  case bridgeCouldNotBeSetUp
  case HealthKitStoreNotAvailable
  case couldNotStartHealthKitQuery
  case invalidHost
  case invalidScheme
  case noProfileIdProvided
  case noTokenAvailableFor(profileId: Swift.String)
  case invalidToken(token: Swift.String)
  case failedToValidateProfile(profileId: Swift.String)
}
extension WeFitterLib.WeFitterHealthKitError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias BridgeCompletionHandler = (Swift.Bool, WeFitterLib.WeFitterHealthKitError?) -> Swift.Void
@objc public class WeFitterConfig : ObjectiveC.NSObject {
  @objc public init(token: Swift.String, url: Swift.String?, startDate: Foundation.Date?)
  @objc convenience public init(token: Swift.String)
  @objc convenience public init(token: Swift.String, url: Swift.String?)
  @objc convenience public init(token: Swift.String, startDate: Foundation.Date?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WeFitter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc(configure:completion:) public static func _configure(_ config: WeFitterLib.WeFitterConfig, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public static func configure(_ config: WeFitterLib.WeFitterConfig, completion: @escaping WeFitterLib.BridgeCompletionHandler)
  @objc public static var canConnectToHealthData: Swift.Bool {
    @objc get
  }
  @objc(connect:) public static func _connect(completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  public static func connect(completion: @escaping WeFitterLib.BridgeCompletionHandler)
  @objc public static func disconnect()
  @objc(Status) public enum _Status : Swift.Int {
    case notConfigured
    case disconnected
    case connected
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Status {
    case notConfigured
    case disconnected
    case connected(profileId: Swift.String)
  }
  @objc(currentStatus) public static var _currentStatus: WeFitterLib.WeFitter._Status {
    @objc get
  }
  @objc public static var connectedProfileId: Swift.String? {
    @objc get
  }
  public static var currentStatus: WeFitterLib.WeFitter.Status {
    get
  }
  @objc deinit
}
extension WeFitterLib.WeFitter._Status : Swift.Equatable {}
extension WeFitterLib.WeFitter._Status : Swift.Hashable {}
extension WeFitterLib.WeFitter._Status : Swift.RawRepresentable {}
